*
**  A module is a class
*

A module must be wrapped inside one or more classes.
The costant variables is the only code allowed to float freely outside classes
definition.

If such object modularization is achieved, we'll be able to create mutiple pynktd class
instances, virtually link them, and easily run various tests on the whole
code. Moreover, the code will be easier to maintain.

We'll refer to "module class" as the main class of the module, f.e. "class
pkt" for pkt.py

*
**  Microthread
*

Every module is completely isolated from the others, the only form of
communication is through API calls and microthread messages.

Every microthread module has the following dictionary:

	# Events class relative (see event.py)
	modA.events

	# List of modules listening to "even_name" of modA
	modA.events.listeners["event_name"] = [mod1, mod2, mod3, ...]
	
	# Queue of events received by modA
	modA.events.inbox

modA will send the event "event_name" to all the modules
listed in modA.events.listeners["event_name"]
