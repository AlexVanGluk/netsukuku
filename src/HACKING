*
**  General suggestions
*

- Use the following tags based programs:
	
	Vim    : http://www.vim.org/
	ctags  : http://ctags.sourceforge.net
	Cscope : http://cscope.sourceforge.net
	|{WoC}|: http://www.freaknet.org/alpt/src/utils/woc/readme


- If you see a word surrounded by semicolon, jump on it (you need cscope). 
  Example:
	 ...
	 *
	 * This structure is used in :map_node:.
	 *
	 ...

  If you see something like {-this-}, that's a WoC tag. You can jump on it, but
  you need a {-WoC-} client: http://www.freaknet.org/alpt/src/utils/woc/readme

- Use TODO.h, CITE.h . They are useful to avoid the pollution of the comment
  space of the sources.

- See http://idiki.dyne.org/wiki/HLL_overview

- Read /usr/src/linux/Documentation/CodingStyle


*
** Functions names 
*

In the name of the function defined in foo.c use the prefix `foo_' or its
abbrevation. For example,

	int foo_bar(int gh) {  };

In the first part of the function, put what the function is operating on, then
in the last part put the action performed by it.
For example:

	RIGHT:	void map_node_del(map_node *node);
	
	WRONG:	void map_del_node()
	WRONG:	void del_map_node()

*
** Pack syntax							|{pack-syntax}|
*

The following syntax is used to describe a pack of a complex structure:

	{ TOKEN }^NUMBER, { TOKEN }^NUMBER, ...

Where,

	TOKEN is anything that can be read and written in memory, for example,
	TOKEN can be one of the following:
		
		- an array
		- a variable
		- a type of a variable
		- a structure (better if packed)
		- another { TOKEN }^NUMBER group
	
	NUMBER is a natural number, indicating the number of repetitions of the
	previous { TOKEN }. When it is 1, it can be omitted.
	For example:
		
		{ int }^3  is the same of  { int }, { int }, { int }
		{ int }    is the same of  { int }^1

This syntax is useful to describe how the pack space is logically divided.
For example, suppose we want to pack the following struct:

	struct astruct {
		int o;
		char mi[7];
	} mystruct[19];

the pack can be described as:
	
	{ { int }, { char }^7 }^19

(In this case it's better to use {-packed-attr-})

For real world examples, see {-pack-syntax:"r-}


*
** Self syntax
*

The word `self', when used in a comment placed inside a structure
definition, refers to the same structure. Ex:

	struct foo
	{
		/*
		 * self.baz is a friend of self.bar
		 */

		int bar;
		int baz;
	}

Suppose we have a nested structure definition, then we'll use the ^^ symbol to
refer to the top structure. Ex:

	struct map 
	{
		struct node
		{
			/*
			 * Coordinates relative to this ^^map
			 */
			int xyz;
		}
	}

The ^^ symbol can be also used to indicate the upper structures. Ex:

	struct map 
	{
		struct group
		{
			/*
			 * Distance from the start of the  self^^map  map
			 */
			int group_distance;

			struct node
			{
				/*
				 * Distance from the start of the
				 * self^^group^^map  map
				 */
				/*
				 * Distance from the start of the ^^map
				 */
				int node_distance;
			}
		}
	}
