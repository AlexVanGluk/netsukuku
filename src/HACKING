Use cscope! 
(Or better cscope+vim)

Use WoC: http://www.freaknet.org/alpt/src/utils/woc/readme

--

If you see a word surrounded by semicolon, jump on it (you need cscope). 
Example:
	 ...
	 *
	 * This structure is used in :map_node:.
	 *
	 ...

If you see something like {-this-}, that's a WoC tag. You can jump on it, but
you need a WoC client: http://www.freaknet.org/alpt/src/utils/woc/readme

--

Use TODO.h, CITE.h . They are useful to don't pollute the comments of the
sources.

-- 

See http://idiki.dyne.org/wiki/HLL_overview

-- 

Read /usr/src/linux/Documentation/CodingStyle

-- 

** Functions names 

In the name of the function defined in foo.c use the prefix `foo_' or its
abbrevation. For example,

	int foo_bar(int gh) {  };

In the first part of the function, put what the function is operating on, then
in the last part put the action performed by it.
For example:

	RIGHT:	void map_node_del(map_node *node);
	
	WRONG:	void map_del_node()
	WRONG:	void del_map_node()

-- 

The word `self', when used in a comment placed inside a structure
definition, refers to the same structure. Ex:

	struct foo
	{
		/*
		 * self.baz is a friend of self.bar
		 */

		int bar;
		int baz;
	}

Suppose we have a nested structure definition, then we'll use the ^^ symbol to
refer to the top structure. Ex:

	struct map 
	{
		struct node
		{
			/*
			 * Coordinates relative to this ^^map
			 */
			int xyz;
		}
	}

The ^^ symbol can be also used to indicate the upper structures. Ex:

	struct map 
	{
		struct group
		{
			/*
			 * Distance from the start of the  self^^map  map
			 */
			int group_distance;

			struct node
			{
				/*
				 * Distance from the start of the
				 * self^^group^^map  map
				 */
				/*
				 * Distance from the start of the ^^map
				 */
				int node_distance;
			}
		}
	}
