# This file is part of Netsukuku
# (c) Copyright 2005 Andrea Lo Pumo aka AlpT <alpt@freaknet.org>
#
# This source code is free software; you can redistribute it and/or
# modify it under the terms of the GNU Public License as published 
# by the Free Software Foundation; either version 2 of the License,
# or (at your option) any later version.
#
# This source code is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# Please refer to the GNU Public License for more details.
#
# You should have received a copy of the GNU Public License along with
# this source code; if not, write to:
# Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

import sys
import os

#
#	Sources and libs
#

sources_common    = Split('xmalloc.c log.c misc.c')
sources_qspn      = Split('qspn-empiric.c map.c') + sources_common
sources_netsukuku = Split("""accept.c llist.c map.c request.c bmap.c daemon.c pkts.c 
		   ll_map.c libnetlink.c  radar.c gmap.c hook.c ipv6-gmp.c
		   if.c inet.c  krnl_route.c krnl_rule.c qspn.c route.c conf.c
		   tracer.c crypto.c andna_cache.c andna.c 
		   netsukuku.c""") + sources_common

libs = Split('gmp pthread crypto')

#
#	Command line options and help
#

opts = Options('build.conf')
opts.AddOptions(('CONF_DIR', """Directory where the Netsukuku configuration files will be installed""",
					   '/etc/netsukuku'),
		('DATA_DIR', 'Directory to install data files',
					'/usr/share/netsukuku'),
		('BIN_DIR' , 'Directory to install the binaries',
					'/usr/bin'),
		EnumOption('debug', 'build the debug code', 'no', 
			allowed_values=('yes', 'no', '1', '0'), map={}, ignorecase=0))
env = Environment(options = opts, ENV = os.environ, CCFLAGS = ' -Wall ')
if ("yes" in env['debug']) or ("1" in env['debug']):
	debug = 1
	env.Append(CPPDEFINES={'DEBUG' : '${debug}'}, CCFLAGS = ' -ggdb -Wall')
	os.system("echo Cscoping and ctagging...; cscope -b; ctags *")
else:
	debug = 0
opts.Save('build.conf', env)

Help("""
*** Usage
      'scons' to build the netsukuku_d binary,
      'scons debug=yes' to build the debug version.
      'scons install' to install it in the system.
      
*** General options
""" + opts.GenerateHelpText(env))


#
#	Configure
#

if not os.path.exists("config.log"):
	print 'Configuring... '
	conf = Configure(env)
	if not conf.CheckLib('gmp'): 
		print 'Did not find libgmp.a or gmp.lib, exiting!'
		Exit(1)
	if not conf.CheckLib('pthread'):
       		print 'Did not find pthread.a or pthread.lib, exiting!'
		Exit(1)
	if not conf.CheckLib('crypto'): 
		print 'Did not find the openssl libcrypto.a or libcrypto.lib, exiting!'
		Exit(1)
		
	env = conf.Finish()

def conf_build(target, source, env):
    conf_defines = {
        "CONF_DIR": env["CONF_DIR"],
	"DATA_DIR": env["DATA_DIR"],
        "debug": debug # this is an int.  1 for true, 0 for false
    }

    conf = file(str(target), "w")
    conf_in = file(str(source), "r")
    conf.write(conf_in.read() % conf_defines)
    conf_in.close()
    conf.close()

if not os.path.exists("config.h"):
	print 'Generating config.h from config.h.in'
	conf_build('config.h', 'config.h.in', env)

if not os.path.exists("netsukuku.conf"):
	print 'Generating netsukuku.conf from netsukuku.conf.in'
	conf_build('netsukuku.conf', 'netsukuku.conf.in', env)


#
#	Build
#

netsukuku_d = env.Program('netsukuku_d', sources_netsukuku, LIBS = libs, CPPPATH = '.')
qspn        = env.Program('qspn-empiric', sources_qspn, LIBS = libs, CPPPATH = '.')

Default(netsukuku_d)


#
#	Install 
#

# Here are our installation paths:
idir_bin    = '$BIN_DIR'
idir_data   = '$DATA_DIR'
idir_conf   = '$CONF_DIR'

env.Install(idir_bin, [netsukuku_d, 'netsukuku_wifi'])
env.Install(idir_conf, ['netsukuku.conf'])
env.Alias('install', [idir_bin, idir_conf])
