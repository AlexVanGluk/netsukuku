import os

##### Sources and libs
sources_common    = Split('xmalloc.c log.c misc.c')
sources_qspn      = Split('qspn-empiric.c map.c ipv6-gmp.c') + sources_common
sources_netsukuku = Split("""accept.c llist.c map.c request.c bmap.c daemon.c pkts.c 
		   ll_map.c libnetlink.c  radar.c gmap.c hook.c ipv6-gmp.c 
		   if.c inet.c  krnl_route.c krnl_rule.c qspn.c route.c
		   tracer.c crypto.c andna_cache.c andna.c 
		   netsukuku.c""") + sources_common

libs = Split('gmp pthread crypto')

##### Options and help
opts = Options()
opts.AddOptions(('config', 'Configuration file', '/etc/netsukuku/netsukuku.conf'),
		EnumOption('debug', 'build the debug code', 'yes', 
			allowed_values=('yes', 'no', '1', '0'), map={}, ignorecase=0))

env = Environment(options = opts, ENV = os.environ, CCFLAGS = ' -Wall ')
if ("yes" in env['debug']) or ("1" in env['debug']):
	env.Append(CPPDEFINES={'DEBUG' : '${debug}'}, CCFLAGS = ' -ggdb -Wall')
	os.system("echo Cscoping and ctagging...; cscope -b; ctags *");

Help("""
*** Usage
      'scons' to build the netsukuku_d binary,
      'scons debug=yes' to build the debug version.
      'scons install' to install it in the system.
      
*** General options
""" + opts.GenerateHelpText(env))


##### Configure
if os.system("test -f config.log"):
	print 'Configuring... '
	conf = Configure(env)
	if not conf.CheckLib('gmp'):
	        print 'Did not find libgmp.a or gmp.lib, exiting!'
		Exit(1)
	if not conf.CheckLib('pthread'):
       		print 'Did not find pthread.a or pthread.lib, exiting!'
		Exit(1)
	env = conf.Finish()

##### Build
netsukuku_d = env.Program('netsukuku_d', sources_netsukuku, LIBS = libs, CPPPATH = '.')
qspn        = env.Program('qspn-empiric', sources_qspn, LIBS = libs, CPPPATH = '.')
Default(netsukuku_d)

bin = env.Install('/usr/bin', netsukuku_d)
env.Alias('install', [bin])
