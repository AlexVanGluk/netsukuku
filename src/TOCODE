--
This is a list of TODOs, which can be implemented in parallel with the
mainstream development of Netsukuku, i.e. you can pick one of the following at
your liking and implement it without worrying too much of the compatibility
with Ntkd.

However, if you're going to develop one of these TODOs, tell us.
(Use the mailing list).

Note: These TODOs are not ordered.
--

- Python bindings

  Interface the exported API to python.

  The idea is to have a "core" written in C, and the rest in python, using a
  minimal py interpreter. This would save a lot of development.
  The "core" can be defined as everything which exports its own API and it's
  used by at least one other source. For example, these would be surely in the
  core: event.h, map.c, qspn.c, tracer.c
  In other words, whatever doesn't require a strict memory and cpu
  control, can be implemented in python.

  Mini TODO: find a good mini-python-interpreter. The desiderable size should
  be ~200Kb

- Interactive shell/console.
  
  If the "Python bindings" TODO is developed, then this TODO becomes easy:
  just use readline() or a simple shell written in python and let the user 
  use the python bindings.

 Example of commands that should be implemented:
	  "stats" gives statistics, 
	  "rnodes" show the list of rnodes,
	  "int_map" dumps the internal map in a ASCIIful way,
	  "ext_map", "bnode_map", "andna_cache", ...,
	  "flush rhcache"

- RSA implementation of signature aggregation, see:
  A Survey of Two Signature Aggregation Techniques:
	  http://crypto.stanford.edu/~dabo/abstracts/aggsurvey.html

  Aggregate and Verifiably Encrypted Signatures from Bilinear Maps:
	  http://crypto.stanford.edu/~dabo/abstracts/aggreg.html


 - Ntk_net_split (NTK_RFC 0012).
   http://lab.dyne.org/Ntk_net_split

   This RFC, once implemented, would be very useful, because it will deprecate
   the "restricted mode", allowing Netsukuku to use the full range of IPs.
 
   There's some magic to do with iptables, but it shouldn't be too
   complicated.

   Moreover, this TODO can be implemented totally in parallel. Even better, it
   can be developed as a stand alone application: it can be useful on its own.

 - Ntk_bandwidth_measurement (NTK_RFC 0002)
   http://lab.dyne.org/Ntk_bandwidth_measurement

   Use libpcap to measure the amount of utilised and free bandwidth of each
   network card.

   In general terms, Ntkd is interested in these two calls:
   	
	(int) current_available_bw(NIC *mynic);
	(int) current_used_bw(NIC *mynic);

   See the RFC for more details.

 - Ntk_carciofo (NTK_RFC 0011)
   http://lab.dyne.org/Ntk_carciofo

   Carciofo can be implemented in parallel using the API maps exported by
   Ntkd (like andna does). However this is a though one and requires a lot of
   work.

 - Documentation:
	
	- Write a document which explain why and how is it possible to easily
	  build efficient distributed structure over Netsukuku (p2p file
	  sharing, and so on...)
	  The reason is simple:
	  	- You have access to the maps of a p2p network
		- You can append data of your own in the QSPN packets
	  
	  In this case, ANDNA is the model. In fact, it is a simple
	  distributed/p2p structure which exploits the Netsukuku maps.
  
 - Use qemu to make Netsukuku run on windows?
  
   You need simply to verify if:

   	1) the Linux Advanced Routing works on qemu:
		ip route
		ip rule
		and this sort of things

        2) the emulated host can be used as a default gw by Windows

	3) A generic wifi/network card, installed on Windows, can be used
	   inside qemu

   If this works, then Netsukuku can be used on Windows, and since Ntkd
   requires little cpu and memory power, we don't need to worry anymore about 
   porting issues.

- A firewall script to turn a ntk node into a routing only node.
  This is more simple to code than to describe:


	              other ntk nodes
		             |
			     |
			     |
			 _________
			|    N    |
    Internet ---------- | WRT ntk | - - w i f i - - - Ntk node A
			|_________|             \
			     |                   \
			     |                    \ Ntk node B
			   L A N
			    
  If N is set to a routing only node, then the nodes A and B will always be
  able to reach the Internet and the "other ntk nodes" through it, but they 
  will not be able to reach the LAN connected to the node N.
  Optionally the node N can leave some "backdoor" ports opened, f.e. it might
  want to leave a ssh login which accepts keys authentication only.

  The port used by Netsukuku will be leaved open too, in this way the nodes
  can still communicate between them.

- Write packagizing scripts for .deb, .rpm, ....
  http://lists.dyne.org/netsukuku/msg00610.php

