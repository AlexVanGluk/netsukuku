	 [HIGH PRIORITY] 

- Testare i boarder node blocks.

- ATTENZIONE: route_del e' disattivato per debugging.


	 [MEDIUM PRIORITY] 

- Usare il multipath per i gnode. Ad esempio se un bnode e' collegato con piu'
  nodi di uno stesso gnode esterno li deve mettere come nexthop nella stessa rotta 
  per raggiungere il gnode esterno. Al contrario se ci sono tanti bnode per
  raggiungere uno stesso gnode, bisogna usare sempre il multipath.
  
- big endian/little endian per gli int nei pkt.

- Portare per *BSD: bisogna usare rt_ioctl.c ed rt_socket.c di quagga
  ( ../othersrc/quagga-*/zebra/ )

- Load from file of int and bnode maps.

	[LOW PRIORITY]

gmap.c: Ottimizzare la validita' di ip in random_ip(). Una possibile soluzione
sarebbe quella di azzerare i bit invalidi.
hook.c: ottimizzare lo spazio di free_node: invece di usare una serie di u_short
free_nodes, si usano MAXGROUPNODE bits, ed ognuno si setta o no. (Usare
asm/bitops.h set_bit, clear_bit..., is_set)
tracer.c:  store_tracer_pkt_connect
broadcast: Tenere in considerazione il gttl.
hook.c:    anti spoof hook
hook.c:    settare l'essid delle wlan0
gmap.c/map.c: non usare piu' le libgmp. Per le somme usiamo sum_128.c, e per
divisioni e le moltiplicazioni, visto che stiamo lavorando su potenze di due,
usiamo gli shift.


 	[ CURRENT TESTS ]
	
12%, krnl_rule.c
48%, qspn.c
49%, tracer.c
79%, radar.c
82%, route.c
85%, bmap.c
90%, krnl_route.c
90%, pkts.c
93%, gmap.c
93%, netsukuku.c
94%, map.c
95%, inet.c
97%, hook.c
99%, daemon.c
99%, if.c
99%, request.c
100%, accept.c
100%, ipv6-gmp.c
100%, libnetlink.c
100%, ll_map.c
100%, llist.c
100%, log.c
100%, misc.c
100%, qspn-empiric.c
100%, xmalloc.c
